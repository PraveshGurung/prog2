#############################################################################
#  This file is part of the gobelijn software.
#  Gobelijn is free software: you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation, either version 3 of the License, or any later
#  version. Gobelijn is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for details. You should have received
#  a copy of the GNU General Public License along with the software. If not,
#  see <http://www.gnu.org/licenses/>.
#
#  Copyright 2012-2017, Jan Broeckhove, CoMP group, Universiteit Antwerpen.
#
#############################################################################

=============================================================================
    Dependencies:
=============================================================================
This project depends on a number of resources. They are included in source 
format (Google Test framework, TCLAP,  ...). The appropriate license files
are included in those subdirectories.

=============================================================================
    Platforms:
=============================================================================
The project has been successfully built on:

- MAC OSX 10.9.5 (Mavericks)         cmake 3.0.2       g++ 4.9.1 (macports)
- MAC OSX 10.9.5 (Mavericks)         cmake 3.0.2       clang++ 3.6 (macports)
- MAC OSX 10.8.4 (Mountain Lion)     cmake 2.8.10.2    g++ 4.8.1 (macports)
- Ubuntu 16.04 (Xenial Xerus)        cmake 3.5.1       g++ 5.4.0
- Ubuntu 14.04 (Trusty Tahr)         cmake 2.8.12.2    g++ 4.8.2
- Ubuntu 14.04 (Trusty Tahr)         cmake 2.8.12.2    clang++ 3.5

=============================================================================
    Directory layout:
=============================================================================
The directory structure of the project follows conventions:
    - code related files (sources, third party libraries and headers, ...)
      in directory "main"
        - for each language the sources in "main/<language>"
        - third party resources in "main/resources" (except
          for gtest which is embedded in the test directory).
    - documentation files (api, manual, html, pdf and text ...)
      in directory "doc"
        - for each document processing tool a subdir "doc/<tool>"
    - miscellaneous resources (scripts, data, ... )
      in directory "resources"
    - test related files (description, scripts, regression files, ...)
      in directory "test"
Every artifact is generated in directory "build" or its subdirectories 
(those names depend on the build procedures).

=============================================================================
    Macro values:
=============================================================================
This text refers to a number of macros that configure the functioning of
the make/cmake build and install targets. If you do not want the default 
values for the macros referred to in this file, there are two options. 

If you are using make, then use a file named MakeLocalConfig. If such file
exists in this directory it will be included by make, thus defining your
macros when make in turn invokes invocation of cmake.

If you work with cmake directly and do not want the default macro values,
you need to define them on the macro values command line.
      
Current macro values can be found reading this file or running make without
target. CMake uses an appropriate default for any macro that has not been set.

=============================================================================
    Build and install project artifacts (application, tests, documentation):
=============================================================================
We use an out of source build of all artifacts using the cmake tool.
This requires the build directory (macro BUILD_DIR) to be created and con-
figured (make target configure) by generating Makefiles in it.
You can define a build type (macro CMAKE_BUILD_TYPE) such as Debug or Release.
The final project build artifacts are installed in a directory (designated by
macro CMAKE_INSTALL_PREFIX).
      
The project sub directories each involve different categories of artifacts:

    main : app and test executables, libraries, configuration files, ...
    doc  : API documentation, license info, code analysis, ...
    test : test definitions and resources for testing main artifacts, ...
    
There are three activities: clean, build, test and install. The targets are:

    all      (build_all)       ( build main + possibly doc             )
    clean    (remove_build)    ( remove the entire build directory     )
    install  (install_all)     ( install all artifacts in install dir  )
	test     (installcheck)    ( run tests, put reports in install dir )  

Whether or not doc is are included in ''all'' and ''install'' targets depends
on the GOBELIJN_INCLUDE_DOC macro. Default is OFF (see later in this file 
for listing or setting macros).

The install directory for the install target is specified by the macro
''CMAKE_INSTALL_PREFIX'' (see later in this file for listing or setting macros).
Installation will produce directories such as:

	<install directory>/bin               containing executables
	<install directory>/include           containing headers
	<install directory>/lib               containing shared/archive libs
	<install directory>/tests             containing test artefacts
	<install directory>/doc               containing doc

If the GOBELIJN_INCLUDE_DOC macro is set to ON then Doxygen documentation is
generated and installed. The install directory will also contain a ''doc''
directory. Specifically, the "root" file for the documentation is at:

	<install directory>/doc/reference_doc_html/index.html

The Namespace List is a good starting point, as each Gobelijn sub-project has
its own namespace. 

The Doxygen generation process will autodetect if your system supports the
Graphviz `dot` command. If it does, inheritance graphs will be generated and
included in the Doxygen output. 

=============================================================================
    Build and install directly with make:
=============================================================================
We use the makefile Makefile to trigger cmake invovations. The targets have
the effect described above:

    "make clean"          makes a full cleanup
    "make all"            build all artifacts
    "make install"        install all artifacts
    "make test"           run all tests

The Makefile targets have, as a default, all the necessary dependencies to
set, so that using them is as foolproof as can be.

If you do not want the default values for the macros referred to in this
file, you can introduce a file named MakeLocalConfig. If such file exists in 
this directory it will be included by make, thus defining your the macros. 

An example MakeLocalConfig file can be found in src/resources/make. 
The Makefile will include MakeLocalConfig when it runs and use the macro 
values in its invocation of cmake.

The relevant macros can be listed executing ''make'' without arguments.

=============================================================================
    Build and install directly with cmake:
=============================================================================
You can bypass the Makefile and directly do ( i.e. the familiar 
command line CMake procedure):

   (1) "mkdir build; cd build"
        creates build directory named target and go to it  
             
   (2) "cmake -DCMAKE_INSTALL_PREFIX:PATH=/tmp/some_dir .." 
        generates Makefiles, defining the install directory macro
                
   (3) "make all; make install; make test"                          
        builds, installs and tests

The cmake invocation will list all the relevat macros that it uses. If you 
do not want the default values for the macros, you need to define them on 
the ''cmake'' invocation line as with the CMAKE_INSTALL_PREFIX (which 
specifies the install directory) above. If, for instance, you want build 
type e.g. Debug, then you have to add ''-DCMAKE_BUILD_TYPE=Debug'' in the 
''cmake'' invocation.
 
#############################################################################
